name: Progetto Antifurto CI Github

# Questo workflow si avvia ogni volta che fai un push sulla branch main.
on:
    push:
        branches:
            - main
            
# Definizione del job chiamato build-and-test.
# Verrà eseguito su un runner GitHub con Ubuntu già predisposto.
jobs:
    build-and-test:
        runs-on: ubuntu-latest
        
        # Qui esportiamo tutte le variabili di ambiente necessarie.
        # Questo simula il comportamento del file .env
        # ma lo fa in modo sicuro tramite i GitHub Secrets.
        # Nel repository GitHub → Settings → Secrets and variables → Actions
        env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER: ${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
            SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
            SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
            NOTIFICATION_SERVICE_URL: ${{ secrets.NOTIFICATION_SERVICE_URL }}
            NOTIFICATION_SERVICE_API_KEY: ${{ secrets.NOTIFICATION_SERVICE_API_KEY }}
            AUTHENTICATION_API_KEY: ${{ secrets.NOTIFICATION_SERVICE_API_KEY }}
            OPENROUTER_API_URL: ${{ secrets.OPENROUTER_API_URL }}
            OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
            AI_MODEL: ${{ secrets.AI_MODEL }}
            
        # Clona il codice del tuo repository nel runner GitHub.
        steps:
            - name: Checkout repository
                uses: actions/checkout@v3
            
            # Installa Java 17, necessario per compilare i progetti Spring Boot.            
            - name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'temurin'
            
            # Compila antifurto-service senza eseguire i test.
            - name: Build antifurto-service
                run: mvn clean package -DskipTests
                working-directory: antifurto-service
            
            # Compila notification-service senza eseguire i test.
            - name: Build notification-service
                run: mvn clean package -DskipTests
                working-directory: notification-service
            
            # Avvia i container in background con docker compose, 
            # facendo la build di eventuali immagini Docker.
            # Usiamo le env definite prima.
            - name: Docker Compose Up (test build)
                run: docker compose up --build -d
                
            # Aspettiamo qualche secondo per dare tempo ai container di avviarsi.
            - name: Wait for services
                run: sleep 10
                
            # Stampiamo i log dei container per verificare che tutto sia partito correttamente.
            - name: Docker Compose Logs
                run: docker compose logs
                
            # Spegniamo e puliamo i container per evitare che rimangano in esecuzione nel runner.   
            - name: Docker Compose Down
                run: docker compose down